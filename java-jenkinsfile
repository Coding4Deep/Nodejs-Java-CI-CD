pipeline {
    agent any

    tools {
        maven 'maven'
    }

    stages {
        stage('Parallel Execution') {
            parallel {
                stage('Pipeline 1 Execution') {
                    stages {
                        stage('Checkout') {
                            steps {
                                git branch: 'main', url: 'https://github.com/Coding4Deep/Nodejs-Java-Project.git'
                            }
                        }
                        stage('Compile') {
                            steps {
                                sh 'mvn compile'
                            }
                        }
                        stage('Unit Test') {
                            steps {
                                sh 'mvn test'
                            }
                        }
                        stage('SonarQube Analysis') {
                            steps {
                                withSonarQubeEnv('SonarQube') { 
                                    sh 'mvn sonar:sonar jacoco:report'
                                }
                            }
                        }
                        stage('Nexus') {
                            steps {
                                sh 'mvn clean package deploy'
                            }
                        }
                        stage('Deploy to Tomcat') {
                            steps {
                                sshagent(['vagrant-loacal-ssh']) {
                                    sh "scp -o StrictHostKeyChecking=no target/JAVA-PROJECT.war vagrant@192.168.33.11:/opt/tomcat/webapps/"
                                }
                            }
                        }
                    }
                }
                stage('Pipeline 2 Execution') {
                    steps {
                        build job: 'NODEJS-PROJECT'
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Publishing JUnit test report to Jenkins UI"
            junit '**/target/surefire-reports/*.xml'
            slackSend(
                channel: '#javanodeprojects',
                color: 'good',
                message: "✅ *Build Successful!*\nJob: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nBranch: ${env.GIT_BRANCH}\nURL: ${env.BUILD_URL}"
            )
        }
        failure {
            slackSend(
                channel: '#javanodeprojects',
                color: 'danger',
                message: "❌ *Build Failed!*\nJob: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nBranch: ${env.GIT_BRANCH}\nURL: ${env.BUILD_URL}"
            )
        }
        always {
            echo "Publishing JaCoCo coverage report to Jenkins UI"
            jacoco(
                execPattern: '**/target/jacoco.exec',
                classPattern: '**/target/classes',
                sourcePattern: '**/src/main/java',
                inclusionPattern: '**/*.class',
                exclusionPattern: '**/test/*.class'
            )
        }
       
    }
    
}
