pipeline {
    agent any

    environment {
        nexusurl='http://192.168.33.11:8081/repository/NODEJS_JAVA_Project/'
        
    }

    tools {
        nodejs 'NodeJS'  // Specify the Node.js version to use for the build
    }

    stages {
        // Checkout stage to pull the code from the GitHub repository
        stage('Checkout') {
            steps {
                git branch: 'nodejs', url: 'https://github.com/Coding4Deep/Nodejs-Java-Project.git'
            }
        }

        // Install dependencies using npm
        stage('Install Dependencies') {
            steps {
                sh 'npm install'  // Install project dependencies
            }
        }

        // Run unit tests and Jest tests
        stage('Unit + Jest Test') {
            steps {
                sh 'npm run test'  // Run unit tests
                sh 'npx jest'      // Run Jest tests
                sh 'npm pack'
            }
        }

         stage('Upload to Nexus') {
              steps {
                 script {
                   echo "Deploying to Nexus..."
                  
                   sh "npm publish --registry=${nexusurl}"
               }
            }
        }

        // SonarQube analysis stage
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { 
                    sh 'npm run sonar'  // Run SonarQube analysis for code quality
                }
            }
        }

        // Start the application using PM2
        stage('Start Application') {
            steps {
                script {
                    // Check if the application is already running with PM2
                    def appRunning = sh(script: 'pm2 list | grep "calculatorAPP"', returnStatus: true)

                    // If the app is running, stop it first
                    if (appRunning == 0) {
                        echo 'Application is already running. Stopping it first.'
                        sh 'pm2 stop calculatorAPP'  // Stop the app to restart it
                    }

                    // Start the application with PM2, adding the -f flag to force re-execution if already running
                    echo 'Starting the application with PM2.'
                    sh 'pm2 start server.js --name "calculatorAPP" -f'
                }
            }
        }

        // Check the PM2 status to confirm the app is running
        stage('Check Status') {
            steps {
                sh 'pm2 status'  // Display the status of PM2 applications
            }
        }
    }

    // Notifications after the pipeline execution
    post {
        success {
            slackSend(
                channel: '#javanodeprojects',
                color: 'good',
                message: "✅ *Build Successful!*\nJob: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nBranch: ${env.GIT_BRANCH}\nURL: ${env.BUILD_URL}"
            )
        }
        failure {
            slackSend(
                channel: '#javanodeprojects',
                color: 'danger',
                message: "❌ *Build Failed!*\nJob: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nBranch: ${env.GIT_BRANCH}\nURL: ${env.BUILD_URL}"
            )
        }
    }
}
